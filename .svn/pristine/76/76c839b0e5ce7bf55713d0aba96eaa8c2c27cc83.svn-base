const { sql, poolPromise } = require('./../utils/db/connpool');
var { log4js } = require('./../utils/log-conf/logger');
var logger = log4js.getLogger('database');

exports.getEmployeeDetails = (searchData, sortById,domainId ,workLocationId, rowStart, rowEnd) => {
    return new Promise((resolve, reject) => {
        new sql.Request(poolPromise)
            .input('searchData', sql.NVarChar, searchData)
            .input('sortById', sql.Numeric, sortById)
            .input('domainId', sql.Numeric, domainId)
            .input('workLocationId', sql.NVarChar, workLocationId)
            .input('rowStart', sql.Numeric, rowStart)
            .input('rowEnd', sql.Numeric, rowEnd)
            .execute('[dbo].[IntranetPortal_sp_getEmployees]', (err, result) => {
                if (err) {
                    //console.log(err);
                    logger.fatal(err);
                    reject(err);
                }

                resolve(result.recordsets[0]);

            })
    })
};

exports.getEmployeeDetailsById = (id) => {
    return new Promise((resolve, reject) => {
        new sql.Request(poolPromise).input('employeeId', sql.NVarChar, id)
            .execute('[dbo].[IntranetPortal_sp_getEmployeeDetailsById]', (err, result) => {
                if (err) {
                    logger.fatal(err);
                    reject(err);
                }
                // poolPromise.close();
                resolve(result.recordsets[0]);

            })
    })
};

exports.getEmployeeTechnicalDetailsById = (id) => {
    return new Promise((resolve, reject) => {
        new sql.Request(poolPromise).input('employeeId', sql.NVarChar, id)
            .execute('[dbo].[IntranetPortal_sp_getEmployeeTechnicalDetailsById]', (err, result) => {
                if (err) {
                    logger.fatal(err);
                    reject(err);
                }
                // poolPromise.close();
                resolve(result.recordsets[0]);

            })
    })
};

exports.getEmployeeDetailsWithToken = (token) => {
    return new Promise((resolve, reject) => {
        new sql.Request(poolPromise).input('userToken', sql.NVarChar, token)
            .execute('[dbo].[IntranetPortal_sp_getUserDetails]', (err, result) => {
                if (err) {
                    logger.fatal(err);
                    reject(err);
                }
                // poolPromise.close();
                resolve(result.recordsets[0]);

            })
    })
};

exports.getEmployeeDetailsDropDown = (data) => {
    return new Promise((resolve, reject) => {
        new sql.Request(poolPromise)
        .input('employeeId', sql.Numeric, data.employeeId)
        .input('searchData', sql.NVarChar, data.searchData)
            .execute('[dbo].[IntranetPortal_sp_getEmployeeDropDown]', (err, result) => {
                if (err) {
                    //console.log(err);
                    logger.fatal(err);
                    reject(err);
                }
                // poolPromise.close();
                resolve(result.recordsets[0]);

            })
    })
};

exports.getAllAppreciations = (employeeId,rowStart,rowEnd) => {
    return new Promise((resolve, reject) => {
        new sql.Request(poolPromise)
        .input('employeeId', sql.Numeric, employeeId)
        .input('rowStart', sql.Numeric, rowStart)
        .input('rowEnd', sql.Numeric, rowEnd)
            .execute('[dbo].[IntranetPortal_sp_getEmployeeAppreciationWall]', (err, result) => {
                if (err) {
                    logger.fatal(err);
                    reject(err);
                }
                // poolPromise.close();
                resolve(result.recordsets[0]);

            })
    })
};
exports.getAppreciationsById = (id) => {
    return new Promise((resolve, reject) => {
        new sql.Request(poolPromise)
            .input('employeeId', sql.NVarChar, id)
            .execute('[dbo].[IntranetPortal_sp_getYourAppreciationWall]', (err, result) => {
                if (err) {
                    logger.fatal(err);
                    reject(err);
                }
                // poolPromise.close();
                resolve(result.recordsets[0]);

            })
    })
};

exports.sendAppreciation = (data) => {

    return new Promise((resolve, reject) => {
        const transaction = poolPromise.transaction();
        transaction.begin(err => {
            // ... error checks

            let rolledBack = false

            transaction.on('rollback', aborted => {
                // emited with aborted === true

                rolledBack = true;
            })

            const ps = new sql.PreparedStatement(transaction)
            ps.input('appreciationTo', sql.Int)
            ps.input('appreciatedBy', sql.Int)
            ps.input('contentOfAppreciation', sql.NVarChar)
            ps.input('createdBy', sql.Int)
            ps.input('createdDate', sql.DateTime)
            ps.input('updatedDate', sql.DateTime)
            ps.prepare('insert into tbl_employees_appreciation_wall (appreciationTo,appreciatedBy,contentOfAppreciation,createdBy,createdDate,updatedDate) values (@appreciationTo,@appreciatedBy,@contentOfAppreciation,@createdBy,@createdDate,@updatedDate) ', err => {


                const request = ps.execute(data, (err, result) => {
                    // ... error checks
                    if (err) {
                        //console.log(err);
                        reject(err);
                    }
                    ps.unprepare(err => {
                        // ... error checks
                        if (err) {
                            if (!rolledBack) {
                                transaction.rollback(err => {
                                    // ... error checks
                                    logger.fatal(err);
                                    reject(err);
                                })
                            }
                        } else {
                            transaction.commit(err => {
                                // ... error checks
                                resolve(result);

                            })
                        }

                    })
                })


            })
        })
    });

}


exports.employeeSortingFilter = () => {
    return new Promise((resolve, reject) => {
        new sql.Request(poolPromise)
            .query('select * from dbo.tbl_static_employee_filter', (err, result) => {
                if (err) {
                    logger.fatal(err);
                    reject(err);
                }

                resolve(result.recordsets[0]);

            });
    })
};

exports.siloViewById = (id) => {
    return new Promise((resolve, reject) => {
        new sql.Request(poolPromise).input('employeeId', sql.NVarChar, id)
            .execute('[dbo].[IntranetPortal_sp_siloView]', (err, result) => {
                if (err) {
                    logger.fatal(err);
                    reject(err);
                }
                // poolPromise.close();
                resolve(result.recordsets[0]);

            })
    })
};

exports.domainList = () => {
    return new Promise((resolve, reject) => {
        new sql.Request(poolPromise)
            .execute('[dbo].[IntranetPortal_sp_Domains]', (err, result) => {
                if (err) {
                    logger.fatal(err);
                    reject(err);
                }
                // poolPromise.close();
                resolve(result.recordsets[0]);

            })
    })
};

exports.desisgnationList = (id) => {
    return new Promise((resolve, reject) => {
        new sql.Request(poolPromise).input('domainId', sql.Numeric, id)
            .execute('[dbo].[IntranetPortal_sp_Designations]', (err, result) => {
                if (err) {
                    logger.fatal(err);
                    reject(err);
                }
                // poolPromise.close();
                resolve(result.recordsets[0]);

            })
    })
};