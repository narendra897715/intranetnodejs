import { Injectable,Component,Inject } from '@angular/core';
import { HttpClient,HttpHeaders 
  } from '@angular/common/http';
import { Observable,Subject } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import * as io from 'socket.io-client';
import { MatDialog,MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';
import { Router } from '@angular/router';
import {DialogData,Inotification} from './app.interface'
import { Headers,RequestOptions  } from '@angular/http';
@Injectable()
export class BusinessLogicService {
  //protected AppComp = new AppComponent;
  // tslint:disable-next-line:no-inferrable-type

  protected baseUrl: string = 'http://localhost:3000/';

 public Otherapps : string = 'http://localhost:8080';  
 public socket = io('http://localhost:3000');
 
 //  production host name
//  protected baseUrl: string = 'http://172.16.10.51:1234/';

//  public Otherapps : string = 'http://172.16.10.51:8088'; 
 public loadingImage : boolean = false;
 public employeeId : number= null;
 public isAdmin : boolean = false;
 public employeeName = null;
  private token: any;
  private subject = new Subject<any>();
  private newsandeventsubject = new Subject<any>();
  constructor(private http: HttpClient, public dialog: MatDialog, private router: Router) {
    this.socket.on('connect',()=>{
      console.log('connected to server');
    });
    //  this.socket.on('newMessage',(email1)=>{
    
    //  console.log(email1);
      
    //  })
  }
  
  loadingImageChange(status: boolean) {
     this.loadingImage = status; }
     employeeIdChange(empId,isAdmin,empname){
         this.employeeId = empId;
         this.isAdmin = isAdmin;
         this.employeeName = empname
     }
  get(serviceName: string): Observable<any> {
    if (localStorage.getItem('authorizationToken')) { this.token = JSON.parse(localStorage.getItem('authorizationToken')).token; }
    return this.http
      .get(this.baseUrl + serviceName + '/',).pipe(
        map((response: Response) =>
        // tslint:disable-next-line:one-line
        {
          return response;
        }, (resson: Response) => { this.handleError(resson); }));
  }

  // getLoginEmployeeDetails():Observable<any>{
  //   return this.http
  //   .post(this.baseUrl + 'employee/getEmployeeDetailsWithToken' + '/',{"token":localStorage.getItem('AuthenticationToken')}).pipe(
  //     map((response: Response) =>
  //     // tslint:disable-next-line:one-line
  //     {
  //      return response;
  //     }, (resson: Response) => { 
  //       console.log("error")
  //       this.handleError(resson);
  //      }));
  // }
  
  get_search(serviceName: string): Observable<any> {
    if (localStorage.getItem('AuthenticationToken')) {
       this.token = (localStorage.getItem('AuthenticationToken')).replace(/^"(.*)"$/, '$1');
       console.log(this.token);
       }
    return this.http
      .get(this.baseUrl + serviceName + '/',{ headers: { 'Authorization': 'Token ' + this.token }}).pipe(
        map((response: Response) => {
          return response;
        }, (resson: Response) => { this.handleError(resson); }));
  }

//   getMethodforotherapps(serviceName:string):Observable<any>{
//     if (localStorage.getItem('AuthenticationToken')) {
//       this.token = (localStorage.getItem('AuthenticationToken').replace("",''));
     
//       }
//       let httpHeaders = new HttpHeaders();
// httpHeaders = httpHeaders.append('Authorization', 'my-auth-token');
// httpHeaders = httpHeaders.append('ID', '001');
// httpHeaders.set('Content-Type', 'application/json');    

// let options = {headers:httpHeaders};
    
//    return this.http
//      .get(serviceName, options ).pipe(
//        map((response: Response) => {
//          return response;
//        }, (resson: Response) => { this.handleError(resson); }));
//   }
 


  postUpdate(serviceName: string,postUpdateObject): Observable<any> {
    return this.http
      .post(this.baseUrl + serviceName + '/',postUpdateObject).pipe(
        map((response: Response) =>
        // tslint:disable-next-line:one-line
        {
          return response;
        }, (resson: Response) => { this.handleError(resson); }));
  }

  

  // deleteimage(serviceName:string,imageId):Observable<any>{
  //   return this.http
  //       .post(this.baseUrl + serviceName + '/',imageId).pipe(
  //         map((response:Response)=>{
  //           return response;
  //         },(reason:Response)=>{this.handleError(reason)})
  //       )
  // }
  sendMessage(message: string) {
    this.subject.next({ text: message });
}



getMessage(): Observable<any> {
    return this.subject.asObservable();
}
  openDialog(status): void {
    const dialogRef = this.dialog.open(notificationDialog, {
      width: '20%',
      data: {name: status}
    });

    dialogRef.afterClosed().subscribe(result => {
      this.sendMessage(result);
      
    });
  }

  receiveeventname(eventname:string){
    this.newsandeventsubject.next({text:eventname});
  }

  geteventname():Observable<any>{
    return this.newsandeventsubject.asObservable();
    
  }

  post(serviceName: string, params: object[] | object | string | number): Observable<any> {
    try {
      // tslint:disable-next-line:max-line-length
      return this.http.post(this.baseUrl + serviceName, params).pipe(catchError(this.handleError as any));
    }
    // tslint:disable-next-line:one-line
    catch (error) { error.status = 401; this.handleError(error); }
  }
  post_unAuth(serviceName: string, params: object | string | number): Observable<any> {
    return this.http.post(this.baseUrl + serviceName + '/', params);
  }
  patch(serviceName: string, params: object | string | number, uniqueId: number): Observable<any> {
    return this.http
      .patch(this.baseUrl + serviceName + '/' + uniqueId + '/', params,
        { headers: { 'Authorization': 'Token ' + this.token } }).pipe(
          map((response: Response) => {
            return response;
          }, (resson: Response) => { this.handleError(resson); }));
  }
  delete(serviceName: string): Observable<any> {
    return this.http
      .delete(this.baseUrl + serviceName + '/').pipe(
        map((response: Response) => {
          return response;
        }, (resson: Response) => { this.handleError(resson); }));
  }

  handleError(error: Response) {
    alert(error);
    if ((error.status === 401 || error.status === 403) && (window.location.href.match(/\?/g) || []).length < 2) {
      localStorage.clear();
      window.location.reload();
    }
  }
}

@Component({
  selector: 'dialog-overview-example-dialog',
  templateUrl: 'notificationDailog.html',
})
export class notificationDialog {
// data : Inotification = {name:null};
  constructor(
    public dialogRef: MatDialogRef<notificationDialog>,
    @Inject(MAT_DIALOG_DATA) public data: Inotification={name:null}) {}

  onNoClick(): void {
    this.dialogRef.close();
  }

}
