import { Component, OnInit, ViewChild, NgZone } from '@angular/core';
import { ActivatedRoute, Router, RoutesRecognized  } from '@angular/router';
import { BusinessLogicService } from '../../business-logic.service';
import { MatDialog } from '@angular/material';
import { EditpopupmodalComponent } from '../../editpopupmodal/editpopupmodal.component';
import { MatPaginator, MatTableDataSource, MatSort } from '@angular/material';
import { IinteractionForumEventCompleteData, ImageProperties, INewimageuploadforexistingarrayForIF } from '../../app.interface';
import { DomSanitizer } from '@angular/platform-browser';
import {EditDailogForPollingeventComponent} from '../edit-dailog-for-pollingevent/edit-dailog-for-pollingevent.component';
import { ImagezoompopupComponent } from './../../imagezoompopup/imagezoompopup.component';
import * as XLSX from 'xlsx';
import {ConfirmDailogComponent} from '../../confirm-dailog/confirm-dailog.component';
import { Subscription } from 'rxjs';
import { MatSnackBar } from '@angular/material';

import { filter } from 'rxjs/operators';
import { pairwise } from 'rxjs/operators';
import { Location } from '@angular/common';
@Component({
  selector: 'app-individual-post',
  templateUrl: './individual-post.component.html',
  styleUrls: ['./individual-post.component.scss'],
  // tslint:disable-next-line:use-host-property-decorator
  host: { 'class': 'section main hbox space-between' }
})
export class IndividualPostComponent implements OnInit {


  displayedColumns: string[] = ['name', 'designation', 'time', 'location', 'pollresponse'];
  dataSource = new MatTableDataSource<IYesNo>();
  @ViewChild(MatPaginator) paginator: MatPaginator;
  @ViewChild(MatSort) sort: MatSort;
  // tslint:disable-next-line:max-line-length
  completeObjectData: IinteractionForumEventCompleteData = { interactionForumsId: null, totalPollingCount: null, newsAndUpdatesId: null, eventName: null, categoryId: null, updatedByName: null, CLDData: [], updatedDate: null, eventDescription: null, commentsData: [], createdByName: null, eventStartDate: null, eventEndData: null, pollingData: [], pollingEmployeeInfo: [], imageData: [], createdBy: null };
  tableView = false;
  votingSelected = true;
  post_object: any;
  vote = true;
  optionSelected: number;
  interactionTableId: any;
  elementId: any;
  category_id: any;
  dummyobject: any;
  eventname: string;
  excelcode: any;
  disableCommentButton = true;
  imadezoomdata = [];
  imageformat: string;
  imageobject: ImageProperties[] = [];
  count = 0;
  sizeexceedsfilename: string = null;
  onlyimagewarning: string = null;
  file: any;
  subscription: Subscription;
  redirectionfrom: string;
  previousUrl: string;
  hideAllEditButtons: boolean;
  newComment: any =
    [{
      id: '',
      author: '',
      name: '',
      email: '',
      content: ''
    }];
    imageObjectwithnewseventtid: INewimageuploadforexistingarrayForIF = {
      'interactionForumsId': null,
      'imageData': null
    };
  constructor(private route: ActivatedRoute, public businesslogic: BusinessLogicService, private router: Router,
    public dialog: MatDialog, private sanitizer: DomSanitizer, public nz: NgZone, public snackBar: MatSnackBar,
    private _location: Location) {
       this.businesslogic.socket.on('newComment', (interactionid) => {
       console.log('socket called');
        if (interactionid === this.completeObjectData.interactionForumsId) {
          if ( this.redirectionfrom  === 'interactionForums') {
            this.displayCompleteDataforinteractionforums();
          } else {
            this.displayCompleteDataFornewsandupdate();
          }
          this.newComment.content = '';
        }
      });
    }
  ngOnInit() {
    // this.route.params.subscribe(params => {
    //   this.eventname = params.eventname;
    //   this.redirectionfrom = params.redirectedFrom;
    //   if (params.redirectedFrom === 'interactionForums') {
    //     this.displayCompleteDataforinteractionforums();
    //   } else {
    //     this.displayCompleteDataFornewsandupdate();
    //   }
    // });
    // this.router.events
    //         .pipe(filter((e: any) => e instanceof RoutesRecognized),
    //             pairwise()
    //         ).subscribe((e: any) => {
    //           this.previousUrl = e[0].urlAfterRedirects;
    //           //  console.log(e[0].urlAfterRedirects); // previous url
    //         });

    if (this.businesslogic.queryParams !== undefined) {
      this.eventname = this.businesslogic.queryParams.eventname;
      this.redirectionfrom = this.businesslogic.queryParams.redirectedFrom;
      if (this.redirectionfrom === 'interactionForums') {
        this.displayCompleteDataforinteractionforums();
      } else {
        this.displayCompleteDataFornewsandupdate();
      }
    } else {
      this._location.back();
    }
  }


  editevent(dataobject): void {
    console.log(dataobject);
    if (dataobject.eventStartDate !== null) {
      dataobject.eventStartDate = new Date(dataobject.eventStartDate);
    }
    if ( dataobject.eventEndDate !== null) {
      dataobject.eventEndDate = new Date(dataobject.eventEndDate);
    }

    if (dataobject.categoryId !== 7) {
      const dialogRef = this.dialog.open(EditpopupmodalComponent, {
        width: '70%',
        data: {editingdata: dataobject, from: 'interactionForums'}
      });
      dialogRef.afterClosed().subscribe(result => {
        if (result !== undefined) {
          this.snackBar.open('Event Updated successfully', '', { duration: 3000, panelClass: ['successMessage']  });
          this.displayCompleteDataforinteractionforums();
        } else {
          console.log('popup closed');
        }

      });
    } else {

      const dialogRef = this.dialog.open(EditDailogForPollingeventComponent, {
        width: '70%',
        data: dataobject
      });
      dialogRef.afterClosed().subscribe(result => {
       // this.displayCompleteDataforinteractionforums();
      });
    }

  }

  checkForCommentDisabled(commentcontent) {
    if (commentcontent.trim().length === 0) {
      this.disableCommentButton = true;
    } else {
     this.disableCommentButton = false;
    }
  }

  displayCompleteDataforinteractionforums() {
    this.businesslogic.postUpdate('interaction_forums/getInteractionForumsDataByID',
                                  { 'interactionForumsId': this.businesslogic.queryParams.interactioneventId,
                                    'employeeId': this.businesslogic.employeeId,
                                    'categoryId': this.businesslogic.queryParams.category_id }).subscribe((response: any) => {
    this.completeObjectData = response[0];
    this.imadezoomdata = [];
    this.makeimagebase64valid(response[0].imageData);
    if (this.completeObjectData.createdBy === this.businesslogic.employeeId
      && this.completeObjectData.categoryId !== 7 && this.completeObjectData.newsAndUpdatesId == null) {
        this.hideAllEditButtons = true;
    } else {
     this.hideAllEditButtons = false;
    }
    if (this.completeObjectData.categoryId === 7) {
        for ( let i = 0; i < this.completeObjectData.pollingData.length; i++) {
          if (this.completeObjectData.pollingData[i].OptionOpted === true) {
              this.optionSelected = this.completeObjectData.pollingData[i].optionId;
          }
        }
      }
      this.dataSource = new MatTableDataSource(<IYesNo[]>this.completeObjectData.pollingEmployeeInfo);
    });
 }

/*make array ready for image zoom event*/

makeimagebase64valid(imagearray) {
  this.imageformat = 'data:image/png;base64,';
  for (let i = 0; i < imagearray.length; i++) {
    this.imadezoomdata.push(this.imageformat + imagearray[i].image);
  }
}
/*make array ready for image zoom event*/
/*Delete image from existing image array*/
deleteimage(imageid) {
  const dialogRef = this.dialog.open(ConfirmDailogComponent, { width: '20%', data : {warning: 'Are you sure you want to delete ?'}});
  dialogRef.afterClosed().subscribe(result => {
    if (result === true) {
      imageid = { 'imageId': imageid };
      this.businesslogic.postUpdate('news&updates/deleteImage', imageid).subscribe((response: any) => {
        this.snackBar.open('Deleted successfully', '', { duration: 3000, panelClass: ['successMessage']  });
        this.displayCompleteDataforinteractionforums();
      });
    }});
 }
/*Delete image from existing image array*/

  displayCompleteDataFornewsandupdate() {
    this.businesslogic.postUpdate('interaction_forums/startOrJoinDiscussion',
                                 { 'newsAndUpdatesId': this.businesslogic.queryParams.newsAndUpdatesId,
                                   'employeeId': this.businesslogic.employeeId,
                                   'createdBy': this.businesslogic.queryParams.createdBy,
                                   'updatedBy': this.businesslogic.queryParams.updatedBy,
                    'enteredTheDiscussion': this.businesslogic.queryParams.enteredTheDiscussion,
                  'interactionForumsId': this.businesslogic.queryParams.interactionForumsId}).subscribe((response: any) => {
   this.completeObjectData = response[0];
   if (this.completeObjectData.createdBy === this.businesslogic.employeeId
     && this.completeObjectData.categoryId !== 7 && this.completeObjectData.newsAndUpdatesId == null) {
       this.hideAllEditButtons = true;
   } else {
    this.hideAllEditButtons = false;
   }
    this.imadezoomdata = [];
 this.makeimagebase64valid(response[0].imageData);
      this.dataSource = new MatTableDataSource(<IYesNo[]>this.completeObjectData.pollingEmployeeInfo);
         });
    // tslint:disable-next-line:max-line-length
   }

  sanitize(url: string) {
    return this.sanitizer.bypassSecurityTrustUrl(url);
  }

  likedTheEvent(eventid, clddata, likedstatus) {
    this.dummyobject = clddata;
    this.businesslogic.post('interaction_forums/likeOrDislike',
                          { 'interactionForumsId': eventid, 'employeeId': this.businesslogic.employeeId,
    'liked': likedstatus }).subscribe((response: any) => {
      this.dummyobject.liked = response.liked;
     if (response.liked === true) {
       if (this.dummyobject.dislikesCount > 0) {
        this.dummyobject.dislikesCount = this.dummyobject.dislikesCount - 1;
       }
      this.dummyobject.likesCount = this.dummyobject.likesCount + 1;
     } else {
       if (this.dummyobject.likesCount > 0 ) {
        this.dummyobject.likesCount = this.dummyobject.likesCount - 1;
       }
      this.dummyobject.dislikesCount = this.dummyobject.dislikesCount + 1;
     }
     this.completeObjectData.CLDData[0] = this.dummyobject;
    // this.interactiveforumdata.find(item => item.interactionForumsId == response.interactionForumsId).CLDData[0] = this.dummyobject;
         });
  }

  pollOptionSelected(event, option) {
    console.log('event', event);
    this.post_object = {
      optionOptedId: option.optionOptedId,
      optionId: option.optionId,
      optedBy: this.businesslogic.employeeId,
      createdBy:  this.businesslogic.employeeId,
      updatedBy:  this.businesslogic.employeeId
    };
    this.businesslogic.post('interaction_forums/savePollingOption', this.post_object).subscribe((response: any) => {
      this.displayCompleteDataforinteractionforums();
    });
  }

  addNewComment(commentcontent, interactionId) {
     this.businesslogic.post('interaction_forums/comments',
                            {'interactionForumsId': interactionId,
                            'employeeId': this.businesslogic.employeeId,
                            'commentContent': commentcontent,
                            'createdBy': this.businesslogic.employeeId,
                            'updatedBy': this.businesslogic.employeeId}).subscribe((response: any) => {
      // this.displayCompleteDataforinteractionforums();
      // this.newComment.content = '';
     });
  }

   /*PopUp fire when we click on image*/
   zoominimage(index) {
    const dialogRef = this.dialog.open(ImagezoompopupComponent, {
      width: '70%',
      data: { allimagedata: this.imadezoomdata, indexvalue: index },
    });

  }

  /*Add New image for existing image array code(narendra)*/
  openInput() {
    document.getElementById('upload').click();
  }

  onFileChange(evt, newseventid) {
    this.count = 0;
    const files = evt.target.files;
    if (files.length +  this.completeObjectData.imageData.length > 5) {
      this.snackBar.open('max of 5 images can be uploaded', '', { duration: 3000, panelClass: ['warningMessage']  });
    } else {
      for (let i = 0; i < files.length; i++) {
        if (files[i].type.indexOf('image') === -1) {
          this.snackBar.open('Accepts Only images', '', { duration: 3000, panelClass: ['warningMessage']  });
          this.count = 1;
          break;
        } else if (files[i].size > 1000000) {
          this.count = 1;
          // this.onlyimagewarning = null;
          this.snackBar.open(files[i].name + ' ' + 'exceeds size limit', '', { duration: 3000, panelClass: ['warningMessage'] });

          // this.sizeexceedsfilename = files[i].name;
          break;
        }

      }
      if (this.count === 0) {
        // this.onlyimagewarning = null;
        // this.sizeexceedsfilename = null;
        if (files) {
          for (let i = 0; i < files.length; i++) {
            this.file = files[i];
            const reader = new FileReader();
            reader.onload = this._handleReaderLoaded.bind(this, files.length, i, files[i], newseventid);
            reader.readAsBinaryString(this.file);
          }
        }
      }
    }

  }

  _handleReaderLoaded(lengthoffiles, ivalue, filevalue, newseventid, readerEvt) {
    const binaryString = readerEvt.target.result;
    this.imageobject.push({
      'imageName': filevalue.name, 'imageType': filevalue.type, 'Image': btoa(binaryString),
      'updatedBy': this.businesslogic.employeeId, 'createdBy': this.businesslogic.employeeId
    });
    if (ivalue + 1 === lengthoffiles) {
      this.Addimagetoexisting(newseventid);
    }

  }

  Addimagetoexisting(newseventid) {
    this.imageObjectwithnewseventtid.interactionForumsId = newseventid;
    this.imageObjectwithnewseventtid.imageData = this.imageobject;

    this.businesslogic.postUpdate('interaction_forums/uploadImageToExistingDiscussion',
                                   this.imageObjectwithnewseventtid).subscribe((response: any) => {
                                    this.imageobject = [];
      //  this.businesslogic.openDialog('Added image successfully');
       this.snackBar.open('Added image successfully', '', { duration: 3000, panelClass: ['successMessage'] });
      this.displayCompleteDataforinteractionforums();
      // console.log("image added data :",response);
      // setTimeout(this.displayCompleteData(newseventid),5000);
      // this.subscription = this.businesslogic.getMessage().subscribe(message => {
      //   this.displayCompleteDataforinteractionforums();
      // });
    });
  }

  /*Add New image for existing image array code(narendra)*/

  refreshcomments(interactionid) {
    this.businesslogic.post('interaction_forums/getCommentsDataById', {'interactionForumsId': interactionid}).subscribe((response: any) => {
      this.nz.run(() => {
         this.completeObjectData.commentsData = response;
      this.newComment.content = '';
      });
     // console.log(response);
    });
  }

  gotoforum() {
    this.router.navigate([this.eventname]);
  }
  gotoEmployeePage(empID) {
    this.router.navigate(['intranet/people/employee', { 'value': true, 'id': empID }]);
  }
  showDetails(interactionid) {
    this.tableView = !this.tableView;
    this.votingSelectionChanged(interactionid, this.optionSelected);
  }

  votingSelectionChanged(interactionid, selectedoptionid) {
    // tslint:disable-next-line:max-line-length
    this.businesslogic.post('interaction_forums/getPollingEmployeeInfo', { 'interactionForumsId': interactionid, 'optionId': selectedoptionid }).subscribe((response: any) => {
      this.dataSource = new MatTableDataSource(<IYesNo[]>response);
      this.dataSource.paginator = this.paginator;
      this.dataSource.sort = this.sort;
    });
  }


  applyFilter(filterValue: string) {
    filterValue = filterValue.trim(); // Remove whitespace
    filterValue = filterValue.toLowerCase(); // MatTableDataSource defaults to lowercase matches
    this.dataSource.filter = filterValue;
  }

  Downloadexcel(id) {
    this.businesslogic.post('interaction_forums/pollingExcelDownload', { 'interactionForumsId': id }).subscribe((response: any) => {
      // this.url_newTab = response;
      const workBook = XLSX.utils.book_new(); // create a new blank book
      const workSheet = XLSX.utils.json_to_sheet(response);
      const wscols = [
        {wch: 20},
        {wch: 30},
        {wch: 20},
        {wch: 20},
        {wch: 20},
        {wch: 20},

    ];
    const wsrows = [
      {hpx: 24, level: 2},

    ];

    workSheet['!rows'] = wsrows;
    workSheet['!cols'] = wscols;
      XLSX.utils.book_append_sheet(workBook, workSheet, 'polling.xlsx'); // add the worksheet to the book
      XLSX.writeFile(workBook, 'polling.xlsx'); // initiate a file download in browser
    });

  }

}


export interface IYesNo {
  name: string;
  time: Date;
  designation: string;
  location: string;
  pollresponse: string;
}
