var createError = require('http-errors');
var express = require('express');
var path = require('path');
var fs = require('fs');
var cookieParser = require('cookie-parser');
var logger = require('morgan');
var rfs = require('rotating-file-stream');
var cors = require('cors');
const helmet = require('helmet');
const responseTime = require('response-time');
const swaggerUi = require('swagger-ui-express');
var indexRouter = require('./routes/index');
var usersRouter = require('./routes/users');
var newsAndUpdatesRouter = require('./routes/NewsAndUpdatesController');
var employeeDetailsRouter = require('./routes/EmployeeDetailsController');
var interactionsForumRouter = require('./routes/InteractionForumsController');
var resourcesRouter = require('./routes/ResourcesController');
const swaggerDocument = require('./swagger.json');
const bodyParser = require('body-parser');
var auth = require('./auth/auth');


var app = express();
var options = {
  explorer: true
};
var onlineOptions = {
  swaggerUrl: 'http://petstore.swagger.io/v2/swagger.json'
}
app.use('/intranet_portal/docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument, options));
//app.use('/online-api-docs', swaggerUi.serve, swaggerUi.setup(null, onlineOptions));
//-----------------------------------view engine------------------------
// view engine setup
// app.set('views', path.join(__dirname, './../views'));
// app.set('view engine', 'jade');
//logger.token('type', function (req, res) { return req.headers['content-type'] })

//---------------------------logging configuration--------------
if (process.env.LOG_RANGE == 'prod') {
  var logDirectory = path.join(__dirname, './../log');
  //ensure log directory exists
  fs.existsSync(logDirectory) || fs.mkdirSync(logDirectory);

  //create a rotating write stream
  var accessLogStream = rfs('access.log', {
    interval: '1d', // rotate daily
    path: logDirectory
  })
  app.use(logger('combined', { stream: accessLogStream }))
}
if (process.env.LOG_RANGE == 'dev') {
  app.use(logger('dev'));
}

//-------------------------other configuration------------------------------
app.use(bodyParser.json({ limit: '50mb' }));
app.use(bodyParser.urlencoded({ limit: '50mb', extended: true }));
//app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, '../public')));
//-----------------------------cross origin----------------------
// app.use(function (req, res, next) {
//   res.header("Access-Control-Allow-Origin", "*");
//   res.header("Access-Control-Allow-Methods", "GET,HEAD,POST,PUT");
//   res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With,x-auth, contentType,Content-Type, Accept");
//   next();
// });
app.use(cors());
//-----------------------------responseTime-------------------------------
app.use(responseTime());
app.use(helmet());
//---------------------------auth-----------------------------------

// app.use(async(req,res,next)=>{
//     var token = req.header('Authorization');
//     console.log(token);
//     next();
// })
app.use(async (req, res, next) => {
  if (req.originalUrl === '/employee/getEmployeeDetailsWithToken') {
    var token = req.header('token');
    console.log(token);
    if (token == null) {
      res.sendStatus(404);
    }
    var xauth = await auth.generateToken(token);
    res.header('x-auth', xauth);
    next();
  } else {
    var token = req.header('x-auth');
    if (token == null) {
      res.sendStatus(404);
    }
    console.log(token);
    try {
      var flag = await auth.validateToken(token);
      if (!flag) {

        res.sendStatus(404);
      } else {
        res.header('x-auth', flag);
        next();
      }

    } catch (error) {
      res.sendStatus(404);
      // console.log(error);
    }

  }

})
//-------------------------routing controllers-----------------------
app.use('/', indexRouter);
app.use('/users', usersRouter);
app.use('/news&updates', newsAndUpdatesRouter);
app.use('/employee', employeeDetailsRouter);
app.use('/interaction_forums', interactionsForumRouter);
app.use('/resources', resourcesRouter);
// catch 404 and forward to error handler
app.use(function (req, res, next) {
  //next(createError(404));
  res.status(600).send('unable to find the requested resource');
});

// error handler
app.use(function (err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});
// process.on('uncaughtException', function (err) {
//   // handle the error safely
//   // if(!error.isOperational)
//   //     process.exit(1);
//   console.log('error from event emitter', err);
// })
module.exports = app;
