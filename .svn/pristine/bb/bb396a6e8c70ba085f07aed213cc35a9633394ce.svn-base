import { Component, OnInit, ViewChild } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { BusinessLogicService } from '../../business-logic.service';
import { MatDialog } from '@angular/material';
import { EditpopupmodalComponent } from '../../editpopupmodal/editpopupmodal.component';
import { MatPaginator, MatTableDataSource, MatSort } from '@angular/material';
import { IinteractionForumEventCompleteData } from '../../app.interface';
import { DomSanitizer } from '@angular/platform-browser';
@Component({
  selector: 'app-individual-post',
  templateUrl: './individual-post.component.html',
  styleUrls: ['./individual-post.component.scss'],
  // tslint:disable-next-line:use-host-property-decorator
  host: { 'class': 'section main hbox space-between' }
})
export class IndividualPostComponent implements OnInit {


  displayedColumns: string[] = ['name', 'designation', 'time', 'location', 'pollresponse'];
  dataSource = new MatTableDataSource<IYesNo>();
  @ViewChild(MatPaginator) paginator: MatPaginator;
  @ViewChild(MatSort) sort: MatSort;
  // tslint:disable-next-line:max-line-length
  completeObjectData: IinteractionForumEventCompleteData = { interactionForumsId:null,eventName: null,categoryId:null, updatedByName: null, CLDData: [], updatedDate: null, eventDescription: null, commentsData: [], createdByName: null, eventStartDate: null, eventEndData: null, pollingData: [], pollingEmployeeInfo: [],imageData:[] };
  tableView = false;
  votingSelected = true;
  post_object: any;
  vote = true;
  optionSelected :number;
  interactionTableId: any;
  elementId: any;
  category_id: any;
  dummyobject : any;
  eventname: string;
  
  newComment: any =
    [{
      id: '',
      author: '',
      name: '',
      email: '',
      content: ''
    }];

  constructor(private route: ActivatedRoute, private businesslogic: BusinessLogicService, private router: Router,
    public dialog: MatDialog,private sanitizer: DomSanitizer) { }

  ngOnInit() {
    this.route.params.subscribe(params => {
      this.eventname = params.eventname;
      if (params.redirectedFrom === 'eventname') {
        this.displayCompleteDataforinteractionforums();
      } else {
        this.displayCompleteDataFornewsandupdate();
      }
    });
  }


  editevent(dataobject): void {
    console.log(dataobject);
    dataobject.eventStartDate = new Date(dataobject.eventStartDate);
    dataobject.eventEndDate = new Date(dataobject.eventEndDate);

    if(dataobject.category_id != 7){
      const dialogRef = this.dialog.open(EditpopupmodalComponent, {
        width: '70%',
        data: dataobject
      });
      dialogRef.afterClosed().subscribe(result => {
        console.log('The dialog was closed');
  
      });
    }
    else{
      
    }
   

  
  }

  displayCompleteDataforinteractionforums() {
    // tslint:disable-next-line:max-line-length
    this.businesslogic.postUpdate('interaction_forums/getInteractionForumsDataByID', { 'interactionForumsId': this.route.snapshot.params['dataId'], 'employeeId': this.businesslogic.employeeId, 'categoryId': this.route.snapshot.params['category_id'] }).subscribe((response: any) => {
     
      this.completeObjectData = response[0];
   
      console.log(this.completeObjectData);
      if(this.completeObjectData.categoryId == 7){
        for(var i=0;i<this.completeObjectData.pollingData.length;i++){
          if(this.completeObjectData.pollingData[i].OptionOpted == true){
              this.optionSelected = this.completeObjectData.pollingData[i].optionId;
          }
        }
      }
      this.dataSource = new MatTableDataSource(<IYesNo[]>this.completeObjectData.pollingEmployeeInfo);

  


    });

    // console.log(this.show);
  }



  displayCompleteDataFornewsandupdate() {
    this.businesslogic.postUpdate('interaction_forums/startOrJoinDiscussion', { 'newsAndUpdatesId': JSON.parse(this.route.snapshot.params['newsAndUpdatesId']), 'employeeId': this.businesslogic.employeeId, 'createdBy': JSON.parse(this.route.snapshot.params['createdBy']) ,'updatedBy': JSON.parse(this.route.snapshot.params['updatedBy']) ,'enteredTheDiscussion':JSON.parse(this.route.snapshot.params['enteredTheDiscussion'])  }).subscribe((response: any) => {
  
         console.log(response[0]);
         this.completeObjectData = response[0];
     
         console.log(this.completeObjectData);
         this.dataSource = new MatTableDataSource(<IYesNo[]>this.completeObjectData.pollingEmployeeInfo);
   
       
   
   
       });
    // tslint:disable-next-line:max-line-length
   
  }

  sanitize(url: string) {
    return this.sanitizer.bypassSecurityTrustUrl(url);
  }

  likedTheEvent(eventid,clddata,likedstatus){
    this.dummyobject = clddata;
    this.businesslogic.post('interaction_forums/likeOrDislike', { 'interactionForumsId': eventid, "employeeId": this.businesslogic.employeeId,
    "liked": likedstatus }).subscribe((response: any) => {
      this.dummyobject.liked = response.liked;
     if(response.liked == true){
       if(this.dummyobject.dislikesCount > 0){
        this.dummyobject.dislikesCount = this.dummyobject.dislikesCount - 1;
       }
      this.dummyobject.likesCount = this.dummyobject.likesCount + 1;
      
     }
     else{
       if(this.dummyobject.likesCount > 0 ){
        this.dummyobject.likesCount = this.dummyobject.likesCount - 1;
       }
      
      this.dummyobject.dislikesCount = this.dummyobject.dislikesCount + 1;
     }
     this.completeObjectData.CLDData[0] = this.dummyobject;
    // this.interactiveforumdata.find(item => item.interactionForumsId == response.interactionForumsId).CLDData[0] = this.dummyobject;
         });
  }

  addNewComment(commentcontent,interactionId){
     this.businesslogic.post('interaction_forums/comments',{'interactionForumsId':interactionId,"employeeId":this.businesslogic.employeeId,"commentContent":commentcontent,"createdBy":this.businesslogic.employeeId,"updatedBy":this.businesslogic.employeeId}).subscribe((response: any)=>{
      this.businesslogic.socket.on('newComment',(interactionid)=>{
        if(interactionId == this.completeObjectData.interactionForumsId){
          this.refreshcomments(interactionid)
        }
       
      })
     
           
     })
  }

  refreshcomments(interactionid){
    this.businesslogic.post('interaction_forums/getCommentsDataById',{'interactionForumsId':interactionid}).subscribe((response:any)=>{
      this.completeObjectData.commentsData = response;
      this.newComment.content = '';
     // console.log(response);
    })
  }

  gotoforum() {
    this.router.navigate([this.eventname]);
  }
  gotoEmployeePage(empID) {
    this.router.navigate(['intranet/people/employee', { 'value': true, 'id': empID }]);
  }
  showDetails(interactionid) {
    this.tableView = !this.tableView;
    this.votingSelectionChanged(interactionid,this.optionSelected);
  }

  votingSelectionChanged(interactionid,selectedoptionid) {
    // tslint:disable-next-line:max-line-length
    this.businesslogic.post('interaction_forums/getPollingEmployeeInfo', { 'interactionForumsId': interactionid, 'optionId': selectedoptionid }).subscribe((response: any) => {
      this.dataSource = new MatTableDataSource(<IYesNo[]>response);
      this.dataSource.paginator = this.paginator;
      this.dataSource.sort = this.sort;
    });
  }


  applyFilter(filterValue: string) {
    filterValue = filterValue.trim(); // Remove whitespace
    filterValue = filterValue.toLowerCase(); // MatTableDataSource defaults to lowercase matches
    this.dataSource.filter = filterValue;
  }

}


export interface IYesNo {
  name: string;
  time: Date;
  designation: string;
  location: string;
  pollresponse: string;
}
